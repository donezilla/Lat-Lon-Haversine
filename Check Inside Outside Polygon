//see http://www.geeksforgeeks.org/how-to-check-if-a-given-point-lies-inside-a-polygon/
//note: I first wrote this when first learning to code, so it's pretty much spaghetti.


//set active spreadsheet
var ss = SpreadsheetApp.getActiveSpreadsheet();

//define infinity
var infinity = 10000;

//define a point

function Test() {
var point = [30.4383,-84.2807];
  Logger.log("Latitude: " + point[0] +  ", Longitude: " + point[1]);
  return point;
}


//define the polygon from the google maps .kml file
function GetPolygon(){
 var polygon = ss.getSheetByName("Polygon");
 var data = polygon.getDataRange().getValues();

 return data;
}


//create a line from the point you want to check to 'infinity'
function MakeLine(point) {

  var pointExtreme = [point[0],infinity];
  //Logger.log(pointExtreme);
  
  return pointExtreme;
}


//Check if the point 'q' lies on the line segment 'pr'

function onSegment(p,q,r){
  
     if (q[0] <= Math.max(p[0], r[0]) && q[0] >= Math.min(p[0], r[0]) &&
         q[1] <= Math.max(p[1], r[1]) && q[1] >= Math.min(p[1], r[1])){
         return true;
         } else{
         return false;
         }
}

/*
function TestOnSegment(){
  var p = [0,4];
  var q = [2,2];
  var r = [4,0];
  Logger.log(onSegment(p,q,r));
  Logger.log(p[1]);
}
*/

//find orientation of ordered triplet (p,q,r)
//Function returns the following:
// 0 --> P,Q and R are colinear or coincident
// 1 --> Clockwise
// 2 --> Counterclockwise
function Orientation(p,q,r){
 var val = (q[1] - p[1]) * (r[0] - q[0]) -
           (q[0] - p[0]) * (r[1] - q[1]);
  if (val == 0) {
    return 0; //colinear
    //Logger.log("It's colinear");
  } else {
    if (val > 0) {
      return 1; //clockwise
      //Logger.log("It's clockwise");
    } else {
      return 2; //counterclockwise
      //Logger.log("It's counterclockwise");
    }
  }  
}

//+++++++++++++++++++++++++++++++++++++  UNSURE OF HOW/WHY THIS WORKS+++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Return true if the line segment P1Q1 and P2Q2 intersect
function Intersection(p1,q1,p2,q2){

  //Determine the four possible orientations for general and special cases
  var o1 = Orientation(p1, q1, p2);
  var o2 = Orientation(p1, q1, q2);
  var o3 = Orientation(p2, q2, p1);
  var o4 = Orientation(p2, q2, q1);
  
  //General case
  if (o1 != o2 && o3 != o4){
    //Logger.log("It's the General Case");
    return true;
  }
  
  //Special cases below:
  //p1, q1, and p2 are colinear and p2 lies on segment p1q1
  if (o1 == 0.0 && onSegment(p1, p2, q1)){
    //Logger.log("It's Option 1");
    return true;
  }
  
  //p1, q1 and p2 are colinear and q2 lies on segment p1q1
  if (o2 == 0.0 && onSegment(p1, q2, q1)){
    //Logger.log("It's Option 2");
    return true;
  }
  
  //p2, q2 and p1 are colinear and p1 lies on segment p2q2
  if (o3 == 0.0 && onSegment(p2, p1, q2)){
    //Logger.log("It's Option 3");
    return true;
  }
  
  //p2, q2 and q1 are colinear and q1 lies on segment p2q2
  if (o4 == 0.0 && onSegment(p2, q1, q2)){
    //Logger.log("It's Option 4");
    return true;
  }
  
  //None of the above
  //Logger.log("It's None");
  return false; 
}
 

//Get number of points in the polygon
function PolygonN (polygon){
  
  var n = polygon.length;
  
  return n;
  
}



//run the raytracing algorithm on latlong points
function InsideOrOutside(polygon, n, point){

  var pointExtreme = MakeLine(point);
  
  //count the intersections of the above line with the sides of the polygon 
  var count = 0, i = 0;
  
  do {
    
    var next = (i+1)%n;
    
    //check if the line segment from 'pointToCheck' to 'pointExtreme' intersects
    //with the line segment from 'polygonPoint[i]' to 'polygonPoint[next]'
    if (Intersection(polygon[i], polygon[next], point, pointExtreme)){
      //if the point is colinear with line segment 'i -> next',
      //check if it lies on a segment of the polygon. If it does, return true.
      //else return false.
      if(Orientation(polygon[i], point, polygon[next]) == 0){
        return onSegment(polygon[i], point, polygon[next]);
      }
      
      count++;
    }
    
    i = next++;
    
  } while (i != 0);
  
  return count&1;
  
}

//Tell me if the input point is inside or outside the previously defined polygon
function testInside(input1, input2, polygon, n){
 var point = [input1,input2];
 var status;
 var count = InsideOrOutside(polygon,n,point);
  Logger.log(count);
  
  if(count == 1){
    status = "Inside";
  }else{
    status = "Outside";
       }
  Logger.log(status);
  return status;
}
  
function Iterate() {

  var datasheet = ss.getSheetByName("Current Participant Addresses");
  
  var addressRow;
  var lat;
  var lon;
  var rowCount = datasheet.getDataRange().getNumRows();
  var urbanOrRural;
  
  var polygon = GetPolygon();
  var n = PolygonN(polygon);
  
  Logger.log(rowCount);
  var lat = datasheet.getRange("D2:D58").getValues();
  var lon = datasheet.getRange("E2:E58").getValues();
  
  for(addressRow =1; addressRow <= 200; addressRow++) {
    
    //Logger.log(addressRow);
    
    var lata = lat[addressRow];
    var lona = lon[addressRow];
    
    //Test if the point is inside or outside
    urbanOrRural = testInside(lata,lona,polygon, n);
    datasheet.getRange("F" + addressRow).setValue(urbanOrRural);

  }
}






